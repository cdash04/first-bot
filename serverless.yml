service: first-bot
provider:
  name: aws
  runtime: nodejs16.x
  region: ca-central-1
  stage: ${env:NODE_ENV}
  tracing:
    apiGateway: true
    lambda: true
  environment:
    NODE_ENV: ${env:NODE_ENV}
    TWITCH_EVENT_SUB_LISTENER_SECRET: ${env:TWITCH_EVENT_SUB_LISTENER_SECRET}
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - secretsmanager:GetSecretValue
        - s3:PutObject
        - s3:GetObject
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:ListTables
        - dynamodb:CreateTable
        - lambda:PublishLayerVersion
        - cloudformation:DescribeStacks
      Resource:
        - 'arn:aws:s3:::layerBucket'
        - '*'

package:
  include:
    - dist/**
  exclude:
    - layer/**
    - node_modules/**
    - src/**
    - dist/bot/**

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-Table

layers:
  nodeModules:
    path: layer
    compatibleRuntimes:
      - nodejs14.x

functions:
  first:
    handler: dist/functions/first.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /firsts
          method: ANY
          cors: true
      - http:
          path: /firsts/{proxy+}
          method: ANY
          cors: true
  broadcasters:
    handler: dist/functions/broadcasters.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /broadcasters
          method: ANY
          cors: true
      - http:
          path: /broadcasters/{proxy+}
          method: ANY
          cors: true
  online-event:
    handler: dist/functions/online-event.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /events/online/
          method: ANY
          cors: true
      - http:
          path: /events/online/{proxy+}
          method: ANY
          cors: true
  offline-event:
    handler: dist/functions/offline-event.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /events/offline/
          method: ANY
          cors: true
      - http:
          path: /events/offline/{proxy+}
          method: ANY
          cors: true
  leaderboard:
    handler: dist/functions/leaderboard.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /leaderboards/
          method: ANY
          cors: true
      - http:
          path: /leaderboards/{proxy+}
          method: ANY
          cors: true
  pay-to-win:
    handler: dist/functions/pay-to-win.handler
    layers:
      - { Ref: NodeModulesLambdaLayer }
    events:
      - http:
          path: /pay-to-win/
          method: ANY
          cors: true
      - http:
          path: /pay-to-win/{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    Table:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST
plugins:
  - serverless-offline