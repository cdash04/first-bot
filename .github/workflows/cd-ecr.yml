name: Push-bot-to-ECR

# Trigger deployment only on push to master branch
on:
  push:
    paths:
      - 'src/bot/**'
      - 'Dockerfile'
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2 on master branch push
    runs-on: ubuntu-latest
    env:
      BOT_NAME: ${{secrets.BOT_NAME}}
      TWITCH_CLIENT_ID: ${{secrets.TWITCH_CLIENT_ID}}
      TWITCH_CLIENT_SECRET: ${{secrets.TWITCH_CLIENT_SECRET}}
      TWITCH_TMI_OAUTH: ${{secrets.TWITCH_TMI_OAUTH}}
      TWITCH_EVENT_SUB_LISTENER_SECRET: ${{secrets.TWITCH_EVENT_SUB_LISTENER_SECRET}}
      APP_API_URL: ${{secrets.APP_API_URL}}
      NODE_ENV: dev

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout the files
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: first-bot
          IMAGE_TAG: latest
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} 
